const Telegraf = require('telegraf')
const Settings = require('../settings.json')
const utility = require('../utility/index.js');

function getUserFields (ctx) {
  var keys = [];
  Object.keys(ctx.users.all[0]).forEach((key, index) => {
    keys[index] = Object.keys(ctx.users.all[0][key])
  })
  return keys;
}

const ChooseCityMenu = Telegraf.Extra
  .HTML()
  .markup((m) => m.inlineKeyboard([
    m.callbackButton('‚öìÔ∏è –ü–∏—Ç–µ—Ä', 'technicianspb'),
    m.callbackButton('üè∞ –ú–æ—Å–∫–≤–∞', 'technicianmoscow'),
    m.callbackButton('üïå –ö–∞–∑–∞–Ω—å', 'techniciankazan')
  ]))


function getInfoStages (ctx, type) {
  var fields = [];
  switch (type) {
    case 'operator':
      fields = ['telegramUsername', 'name']
      messages = ['–ü—Ä–∏—à–ª–∏ <b>telegram –ª–æ–≥–∏–Ω</b> —Å—Ç–∞—Ä—à–µ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –±–µ–∑ –∑–Ω–∞–∫–∞ @', '–ü—Ä–∏—à–ª–∏ <b>–∏–º—è</b> (–Ω–µ –§–ò–û, –ø—Ä–æ—Å—Ç–æ –∏–º—è) —Å—Ç–∞—Ä—à–µ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞\n\n<i>–ò–º—è –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ —á–µ–ª–æ–≤–µ–∫—É</i>']
      break;
    case 'chats':
      fields = ['telegramUsername', 'name']
      messages = ['–ü—Ä–∏—à–ª–∏ <b>telegram –ª–æ–≥–∏–Ω</b> —Å–∞–ø–ø–æ—Ä—Ç–∞ –≤ —á–∞—Ç–∞—Ö –±–µ–∑ –∑–Ω–∞–∫–∞ @', '–ü—Ä–∏—à–ª–∏ –∏–º—è (–Ω–µ –§–ò–û, –ø—Ä–æ—Å—Ç–æ –∏–º—è)\n\n<i>–ò–º—è –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ —á–µ–ª–æ–≤–µ–∫—É</i>']
      break;
    case 'technician':
      fields = ['telegramUsername', 'name', 'phone']
      messages = ['–ü—Ä–∏—à–ª–∏ <b>telegram –ª–æ–≥–∏–Ω</b> —Ç–µ—Ö–Ω–∏–∫–∞ –±–µ–∑ –∑–Ω–∞–∫–∞ @', '–ü—Ä–∏—à–ª–∏ <b>–§–ò–û</b> —Ç–µ—Ö–Ω–∏–∫–∞\n\n<i>–§–ò–û –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ —Ç–∞–∫—Å–∏</i>', '–ü—Ä–∏—à–ª–∏ <b>—Ç–µ–ª–µ—Ñ–æ–Ω</b> —Ç–µ—Ö–Ω–∏–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +799999999998\n\n<i>–¢–µ–ª–µ—Ñ–æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–∫–∞–∑–µ —Ç–∞–∫—Å–∏</i>']
      break;
  }
  return {fields, messages};
}

function getMenuLocalUser (ctx) {
  var userFields = getUserFields(ctx);
  var menu = [];
  menu.roles = [];
  menu.info = [];
  userFields[0].forEach((fieldName) => {
    menu.info.push(Telegraf.Markup.callbackButton(`${ctx.users.all[0].info[fieldName].split('<b>')[1].split('</b>')[0]} ${ctx.session.user.info[fieldName]}`, `actionEditUserInfo_${fieldName}`))
  })
  userFields[1].forEach((roleName) => {
    switch (ctx.session.user.roles[roleName]) {
      case 1:
        menu.roles.push(Telegraf.Markup.callbackButton('‚úÖ ' + ctx.users.all[0].roles[roleName], 'actionSwitchUserRole_' + roleName))
        break;
      case 0:
        menu.roles.push(Telegraf.Markup.callbackButton('‚ùå ' + ctx.users.all[0].roles[roleName], 'actionSwitchUserRole_' + roleName))
        break;
    }
  })
  menu.roles.push(Telegraf.Markup.callbackButton('‚úçÔ∏è –ö –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏', 'actionEditUser_editInfo'));
  menu.roles.push(Telegraf.Markup.callbackButton('‚úÖ –ì–æ—Ç–æ–≤–æ', 'actionEditUser_done'));
  menu.info.push(Telegraf.Markup.callbackButton('‚öôÔ∏è –ö –¥–æ—Å—Ç—É–ø–∞–º', 'actionEditUser_editRoles'));
  menu.info.push(Telegraf.Markup.callbackButton('‚úÖ –ì–æ—Ç–æ–≤–æ', 'actionEditUser_done'));
  return menu;
}

function getUserCardByIndex (ctx, userID) {
  var keys = [];
  Object.keys(ctx.users.all[0]).forEach((key, index) => {
    keys[index] = Object.keys(ctx.users.all[0][key])
  })

  var message = '';

  if (userID < 0) {
    message = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –Ω–µ—Ç –æ–ø–µ—á–∞—Ç–∫–∏.';
  } else {
    message = '–ö–∞—Ä—Ç–æ—á–∫–∞ <b>' + ctx.users.all[userID].info.telegramUsername + '</b> <i>(' + userID + ')</i>\n';

    message += '\n<i>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</i>\n'

    keys[0].forEach((key, index) => {
      if (ctx.users.all[userID]['info'][keys[0][index]].toString().length)
        message += ctx.users.all[0]['info'][keys[0][index]] + ctx.users.all[userID]['info'][keys[0][index]] + '\n'
    });

    message += '\n<i>–î–æ—Å—Ç—É–ø—ã</i>\n'

    keys[1].forEach((key, index) => {
      if (ctx.users.all[userID]['roles'][keys[1][index]] > 0)
        message += ctx.users.all[0]['roles'][keys[1][index]] + '\n';
    });
  }
  return message;
}

function hasRoleByTelegramID (ctx, roleToCheck, telegramID) {
  for (var i = 1; i < ctx.users.all.length; i++) {
    if (ctx.users.all[i].info.telegramID == telegramID)
      return ctx.users.all[i].roles[roleToCheck];
  }
  return 0;
}

function hasRoleByTelegramUsername (ctx, roleToCheck, telegramUsername) {
  for (var i = 1; i < ctx.users.all.length; i++) {
    if (ctx.users.all[i].info.telegramUsername === telegramUsername)
      return ctx.users.all[i].roles[roleToCheck];
  }
  return 0;
}

function getIDByTelegramUsername (ctx, username) {
  var stringToSearch = new RegExp(username, 'i');
  var id = -1;
  ctx.users.all.forEach((user, index) => {
    if (user.info.telegramUsername.search(stringToSearch) > -1) id = index;
  })
  return id;
}

function getLocalUserCard (ctx) {
  var keys = getUserFields(ctx);

  var message = '–ö–∞—Ä—Ç–æ—á–∫–∞ <b>' + ctx.session.user.info.telegramUsername + '</b>\n';

  message += '\n<i>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</i>\n'

  keys[0].forEach((key, index) => {
    if (ctx.session.user['info'][keys[0][index]].toString().length)
      message += ctx.users.all[0]['info'][keys[0][index]] + ctx.session.user['info'][keys[0][index]] + '\n'
  });

  message += '\n<i>–î–æ—Å—Ç—É–ø—ã</i>\n'

  keys[1].forEach((key, index) => {
    if (ctx.session.user['roles'][keys[1][index]] > 0)
      message += ctx.users.all[0]['roles'][keys[1][index]] + '\n';
  });
  return message;
}

module.exports = {
  getIDByTelegramUsername: function (ctx, username) {
    var stringToSearch = new RegExp(username, 'i');
    var id = -1;
    ctx.users.all.forEach((user, index) => {
      if (user.info.telegramUsername.search(stringToSearch) > -1) id = index;
    })
    return id;
  },
  getTelegramIDByTelegramUsername: function (ctx, username) {
    var stringToSearch = new RegExp(username, 'i');
    var id = -1;
    ctx.users.all.forEach((user, index) => {
      if (user.info.telegramUsername.search(stringToSearch) > -1) id = user.info.telegramID;
    })
    return id;
  },
  getIDByTelegramID: function (ctx, telegramID) {
    for (var i = 1; i < ctx.users.all.length; i++) {
      if (ctx.users.all[i].info.telegramID === telegramID)
        return i;
    }
    return -1;
  },
  getIDByStaff: function (ctx, staff) {
    var stringToSearch = new RegExp(staff, 'gi');
    for (var i = 1; i < ctx.users.all.length; i++) {
      if (ctx.users.all[i].info.staffUsername.search(stringToSearch) > -1)
        return i;
    }
    return -1;
  },
  getNameByPhone: function (ctx, phone) {
    for (var i = 1; i < ctx.users.all.length; i++) {
      if (ctx.users.all[i].info.phone === phone)
        return ctx.users.all[i].info.name;
    }
    return -1;
  },
  hasRoleByTelegramID: function (ctx, roleToCheck, telegramID) {
    for (var i = 1; i < ctx.users.all.length; i++) {
      if (ctx.users.all[i].info.telegramID === telegramID)
        return ctx.users.all[i].roles[roleToCheck];
    }
    return 0;
  },
  hasRoleByTelegramUsername: function (ctx, roleToCheck, telegramUsername) {
    for (var i = 1; i < ctx.users.all.length; i++) {
      if (ctx.users.all[i].info.telegramUsername === telegramUsername)
        return ctx.users.all[i].roles[roleToCheck];
    }
    return 0;
  },
  hasRoleByPhone: function (ctx, roleToCheck, phone) {
    for (var i = 1; i < ctx.users.all.length; i++) {
      if (ctx.users.all[i].info.phone === phone)
        return ctx.users.all[i].roles[roleToCheck];
    }
    return 0;
  },
  hasRole: function (ctx, roleToCheck) { //need to rename or replace this one
    for (var i = 1; i < ctx.users.all.length; i++) {
      if (typeof ctx.message == "undefined") {
        if (ctx.users.all[i].info.telegramUsername === ctx.from.username)
          return ctx.users.all[i].roles[roleToCheck];
      } else {
        if (ctx.users.all[i].info.telegramUsername === ctx.message.from.username)
          return ctx.users.all[i].roles[roleToCheck];
      }
    }
    return 0;
  },


  createBlankUser: function (ctx) {
    var userFields = getUserFields(ctx);
    ctx.session.user = {info: {}, roles: {}};
    userFields[0].forEach((fieldName) => {
      ctx.session.user.info[fieldName] = '';
    })
    userFields[1].forEach((fieldName) => {
      ctx.session.user.roles[fieldName] = 0;
    })
  },


  getUserFields: function (ctx) {
    var keys = [];
    Object.keys(ctx.users.all[0]).forEach((key, index) => {
      keys[index] = Object.keys(ctx.users.all[0][key])
    })
    return keys;
  },


  getUserCardByIndex: function (ctx, userID) {
    var keys = [];
    Object.keys(ctx.users.all[0]).forEach((key, index) => {
      keys[index] = Object.keys(ctx.users.all[0][key])
    })

    var message = '';

    if (userID < 0) {
      message = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –Ω–µ—Ç –æ–ø–µ—á–∞—Ç–∫–∏.';
    } else {
      message = '–ö–∞—Ä—Ç–æ—á–∫–∞ <b>' + ctx.users.all[userID].info.telegramUsername + '</b> <i>(' + userID + ')</i>\n';

      message += '\n<i>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</i>\n'

      keys[0].forEach((key, index) => {
        if (ctx.users.all[userID]['info'][keys[0][index]].toString().length)
          message += ctx.users.all[0]['info'][keys[0][index]] + ctx.users.all[userID]['info'][keys[0][index]] + '\n'
      });

      message += '\n<i>–î–æ—Å—Ç—É–ø—ã</i>\n'

      keys[1].forEach((key, index) => {
        if (ctx.users.all[userID]['roles'][keys[1][index]] > 0)
          message += ctx.users.all[0]['roles'][keys[1][index]] + '\n';
      });
    }
    return message;
  },


  isTechnicianByTelegramID: function (ctx, telegramID) {
    console.log(hasRoleByTelegramID(ctx, 'technicianMoscow', telegramID))
    if (hasRoleByTelegramID(ctx, 'technicianMoscow', telegramID) || hasRoleByTelegramID(ctx, 'technicianSaintPetersburg', telegramID) || hasRoleByTelegramID(ctx, 'technicianKazan', telegramID))
      return 1;
    else
      return 0;
  },


  createStagesForUser: function (ctx, type) {
    ctx.session.currentField = 0;
    ctx.session.fields = getInfoStages(ctx, type).fields;
    ctx.session.messages = getInfoStages(ctx, type).messages;
    ctx.session.type = type;
    ctx.replyWithHTML(ctx.session.messages[ctx.session.currentField]);
  },


  waitForCreationInfo: function (ctx) {
    if (typeof ctx.session.currentField != 'undefined' && ctx.session.currentField != null) {

      // Let imagine example: we want to create user with 4 fields: username,
      // name, phone and birthday
      // length = 4
      // lastIndex = 3

      // If it is username, name or phone - write field, go further and send
      //message
      if (ctx.session.currentField < (ctx.session.fields.length - 1)) {
        ctx.session.user.info[ctx.session.fields[ctx.session.currentField]] = ctx.message.text;
        ctx.session.currentField++;
        ctx.replyWithHTML(ctx.session.messages[ctx.session.currentField])
      } else {

        // If it is lastField (birthday) - write info, set particular role
        if (ctx.session.currentField === (ctx.session.fields.length - 1)) {
          ctx.session.user.info[ctx.session.fields[ctx.session.currentField]] = ctx.message.text;
          switch (ctx.session.type) {
            case 'operator':
              ctx.session.user.roles.seniorOperator = 1;
              ctx.users.all.push(ctx.session.user)
              ctx.session = undefined;
              ctx.replyWithHTML('–ù–æ–≤—ã–π —Å—Ç–∞—Ä—à–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n' + getUserCardByIndex(ctx, ctx.users.all.length - 1));
              break;
            case 'chats':
              ctx.session.user.roles.chats = 1;
              ctx.users.all.push(ctx.session.user)
              ctx.session = undefined;
              ctx.replyWithHTML('–ù–æ–≤—ã–π —á–∞—Ç–æ–≤—Å–∫–∏–π —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n' + getUserCardByIndex(ctx, ctx.users.all.length - 1));
              break;
            case 'technician':
              ctx.replyWithHTML('–í—ã–±–µ—Ä–∏ <b>–≥–æ—Ä–æ–¥</b>, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–µ—Ö–Ω–∏–∫', ChooseCityMenu);
              break;
          }
        }
      }
    }
  },


  sendMenuEditUser: function (ctx) {
    var stringBefore = '/edit '
    var loginToEdit = ctx.message.text.substring(stringBefore.length, ctx.message.text.length);
    if (loginToEdit === '') {
      ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã\n\n/edit <telegram_login>\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: /edit ' + ctx.message.from.username);
    } else {
      ctx.session.ID = getIDByTelegramUsername(ctx, loginToEdit);
      ctx.session.user = ctx.users.all[ctx.session.ID];
      if (ctx.session.ID < 0) {
        ctx.reply('–ù–µ –Ω–∞–π–¥–µ–Ω —á–µ–ª–æ–≤–µ–∫ —Å –ª–æ–≥–∏–Ω–æ–º @' + loginToEdit);
      } else {
        var menuUserInfo = getMenuLocalUser(ctx).info;
        ctx.replyWithHTML(getUserCardByIndex(ctx, ctx.session.ID), Telegraf.Extra.HTML().markup((m) => m.inlineKeyboard(menuUserInfo, {
          columns: 1
        })))
      }
    }
  },


  sendMenuEditRoles: function (ctx) {
    ctx.deleteMessage();
    var menu = getMenuLocalUser(ctx);
    ctx.replyWithHTML(`–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–µ —Ä–æ–ª–∏ –¥–ª—è @${ctx.session.user.info.telegramUsername}`, Telegraf.Extra.HTML().markup((m) => m.inlineKeyboard(menu.roles, {
      columns: 2
    })))
  },

  sendMenuEditInfo: function (ctx) {
    ctx.deleteMessage();
    var menu = getMenuLocalUser(ctx);
    ctx.replyWithHTML(getLocalUserCard(ctx), Telegraf.Extra.HTML().markup((m) => m.inlineKeyboard(menu.info, {
      columns: 1
    })))
  },

  cancelEditInfo: function (ctx) {
    ctx.deleteMessage();
    ctx.users.all[ctx.session.ID] = ctx.session.user;
    ctx.replyWithHTML('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\n\n' + getLocalUserCard(ctx))
  },

  switchRole: function (ctx) {
    var roleName = ctx.callbackQuery.data.split('_')[1];
    if (ctx.session.user.roles[roleName]) {
      ctx.session.user.roles[roleName] = 0;
    } else {
      ctx.session.user.roles[roleName] = 1;
    }
    ctx.deleteMessage();
    menu = getMenuLocalUser(ctx);
    ctx.replyWithHTML(`–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–µ —Ä–æ–ª–∏ –¥–ª—è @${ctx.session.user.info.telegramUsername}`, Telegraf.Extra.HTML().markup((m) => m.inlineKeyboard(menu.roles, {
      columns: 2
    })))
  },

  sendUserCard: function (ctx) {
    var stringBefore = '/info '
    var loginToCheck = ctx.message.text.substring(stringBefore.length, ctx.message.text.length);
    var userID = getIDByTelegramUsername(ctx, loginToCheck)
    ctx.replyWithHTML(getUserCardByIndex(ctx, userID));
  },

  waitForNewInfo: function (ctx) {
    ctx.session.fieldToChange = ctx.callbackQuery.data.split('_')[1];
    ctx.replyWithHTML(`–ü—Ä–∏—à–ª–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è ${ctx.users.all[0].info[ctx.session.fieldToChange].split(':')[0]}</b>`);
    utility.hideMenu(ctx);
  },

  writeNewInfo: function (ctx) {
    ctx.session.user.info[ctx.session.fieldToChange] = ctx.message.text;
    var menu = getMenuLocalUser(ctx);
    ctx.replyWithHTML('–£—Å–ø–µ—Ö!\n\n' + getLocalUserCard(ctx), Telegraf.Extra.HTML().markup((m) => m.inlineKeyboard(menu.info, {
      columns: 1
    })))
    ctx.session.fieldToChange = undefined;
  },


  checkForDuplicates: function (ctx) {
    ctx.users.all.forEach((user, index) => {
      ctx.users.all.forEach((anotherUser, anotherIndex) => {
        if (user.info.telegramUsername === anotherUser.info.telegramUsername && index !== anotherIndex) {
          console.log(`${anotherIndex} seems like a duplicate of ${index}: ${anotherUser.info.telegramUsername} === ${user.info.telegramUsername}`);
        }
      })
    })
    console.log('done');
  },

  greetAndWriteID: function (ctx) {
    var userID = getIDByTelegramUsername(ctx, ctx.message.from.username);
    if (userID > -1) {
      if (ctx.users.all[userID].info.telegramID == 0 || ctx.users.all[userID].info.telegramID == '') {
        ctx.users.all[userID].info.telegramID = ctx.message.from.id;
        ctx.telegram.sendMessage(Settings.chats.test.id, '–ó–∞–ø–∏—Å–∞–ª Telegram ID –¥–ª—è @' + ctx.message.from.username + ' <i>(' + userID + ')</i>: ' + ctx.message.from.id, Telegraf.Extra.HTML());
        if (ctx.users.all[userID].info.name.length > 2 && typeof ctx.users.all[userID].info.name !== 'undefined') ctx.replyWithHTML(`–ü—Ä–∏–≤–µ—Ç, ${ctx.users.all[userID].info.name} :) –¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–µ–Ω —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞`); else ctx.replyWithHTML(`–ü—Ä–∏–≤–µ—Ç :) –¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–µ–Ω —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞`);
      } else {
        ctx.replyWithHTML('–ü—Ä–∏–≤–µ—Ç! –¢–µ–±–µ –¥–æ—Å—Ç—É–ø–µ–Ω —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞, –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –Ω–µ –ø–∏—Å–∞—Ç—å /start');
      }
    }
  },


  checkIfIsTechnician: function (ctx) {
    if (typeof ctx.message.reply_to_message !== 'undefined') {
      if (typeof ctx.message.reply_to_message.from.username !== 'undefined') {
        if (hasRoleByTelegramUsername(ctx, 'technicianMoscow', ctx.message.reply_to_message.from.username) || hasRoleByTelegramUsername(ctx, 'technicianSaintPetersburg', ctx.message.reply_to_message.from.username) || hasRoleByTelegramUsername(ctx, 'technicianKazan', ctx.message.reply_to_message.from.username)) {
          if (hasRoleByTelegramID(ctx, 'technicianMoscow', ctx.message.reply_to_message.from.id) || hasRoleByTelegramID(ctx, 'technicianSaintPetersburg', ctx.message.reply_to_message.from.id) || hasRoleByTelegramID(ctx, 'technicianKazan', ctx.message.reply_to_message.from.id))
            ctx.replyWithHTML(`@${ctx.message.reply_to_message.from.username} –º–æ–∂–µ—Ç –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å —Ç–∞–∫—Å–∏ —á–µ—Ä–µ–∑ –±–æ—Ç–∞.\n\n<i>–î–ª—è –∑–∞–∫–∞–∑–∞ —Ç–∞–∫—Å–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /taxi –≤ –õ–° @drivesupportdutybot</i>`)
          else
            ctx.replyWithHTML(`–î–∞–Ω–Ω—ã–µ –æ @${ctx.message.reply_to_message.from.username} —É –±–æ—Ç–∞ –µ—Å—Ç—å, –Ω–æ –Ω—É–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å ID.\n\n–î–ª—è —ç—Ç–æ–≥–æ @${ctx.message.reply_to_message.from.username} –¥–æ–ª–∂–µ–Ω <b>–≤ –õ–° @drivesupportdutybot</b> –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /start`)
        } else {
          ctx.replyWithHTML(`–î–∞–Ω–Ω—ã—Ö –æ @${ctx.message.reply_to_message.from.username} –Ω–µ—Ç.\n\n–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Ö–Ω–∏–∫–µ - @${ctx.message.reply_to_message.from.username} –¥–æ–ª–∂–µ–Ω –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –õ–° @example_login –§–ò–û –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞`);
        }
      } else {
        ctx.replyWithHTML(`–ü–æ—Ö–æ–∂–µ, —á—Ç–æ —É –ø—Ä–æ–≤–µ—Ä—è–µ–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–æ–≥–∏–Ω —Ç–µ–ª–µ–≥—Ä–∞–º</b>. –ù—É–∂–Ω–æ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.`)
      }
    } else {
      ctx.replyWithHTML(`–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–æ–≤ —Ç–µ—Ö–Ω–∏–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /check, <b>–æ—Ç–≤–µ—á–∞—è</b> –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∞.`)
    }
  },



  getUserInfoByAnotherInfo: function (ctx, fieldToGet, fieldFromName, fieldFromValue) {
    var userID = -1;
    ctx.users.all.forEach((user, index) => {
      if (user.info[fieldFromName] === fieldFromValue) userID = index;
    })

    return ctx.users.all[userID].info[fieldToGet];
  }
}
