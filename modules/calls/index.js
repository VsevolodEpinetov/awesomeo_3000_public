const Telegraf = require('telegraf')

const date = require('../date/index.js');
const utility = require('../utility/index.js');
const settings = require('../settings.json')

function sleep(ms) {
  return new Promise(resolve => {
    setTimeout(resolve, ms)
  })
}

const callsMenu = Telegraf.Extra
  .HTML()
  .markup((m) => m.inlineKeyboard([
    m.callbackButton('–°–¥–∞—Ç—å –¥–µ–∂—É—Ä—Å—Ç–≤–æ', 'resetcallsduty'),
    m.callbackButton('–ó–∞—Å—Ç—É–ø–∏—Ç—å –Ω–∞ –¥–µ–∂—É—Ä—Å—Ç–≤–æ', 'startcallsduty'),
    m.callbackButton('–û—Ç–º–µ–Ω–∞', 'cancelprocedure')
  ], {
    columns: 2
}))

module.exports = {


  showAttendantMenuOutgoingCalls: function (ctx) {

    try {
      if (typeof ctx.calls.attendants === 'undefined') ctx.calls.attendants = [];
      if (ctx.calls.attendants.length === 0)
        ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –¥–µ–∂—É—Ä—Å—Ç–≤–æ–º –Ω–∞ –∏—Å—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–∞—Ö.\n<i>–°–µ–π—á–∞—Å –¥–µ–∂—É—Ä–Ω–æ–≥–æ –Ω–µ—Ç.</i>', callsMenu);
      else {
        if (ctx.calls.attendants.length === 1) {
          ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –¥–µ–∂—É—Ä—Å—Ç–≤–æ–º –Ω–∞ –∏—Å—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–∞—Ö.\n<i>–°–µ–π—á–∞—Å –¥–µ–∂—É—Ä–∏—Ç</i> @${ctx.calls.attendants[0].telegramUsername}`, callsMenu);
        } else {
          var attendants = '';
          ctx.calls.attendants.forEach (operator => {
            attendants += ' @' + operator.telegramUsername;
          })
          ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –¥–µ–∂—É—Ä—Å—Ç–≤–æ–º –Ω–∞ –∏—Å—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–∞—Ö.\n<i>–°–µ–π—á–∞—Å –¥–µ–∂—É—Ä—è—Ç</i>${attendants}`, callsMenu);
        }
      }
    }
    catch (error) {
      console.log(error);
      ctx.replyWithHTML('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ :( –ü–æ–ø—Ä–æ–±—É–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –µ—â—ë —Ä–∞–∑, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è - —Å–∫–∞–∂–∏ –°–µ–≤–µ', Telegraf.Extra.inReplyTo(ctx.message.message_id));
    }
  },


  showAttendantMenu: function (ctx) {

    try {
      if (typeof ctx.session.attendants === 'undefined') {
        ctx.session.attendants = [];
      }
      if (ctx.session.attendants.length === 0)
        ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –¥–µ–∂—É—Ä—Å—Ç–≤–æ–º –Ω–∞ –∏—Å—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–∞—Ö.\n<i>–°–µ–π—á–∞—Å –¥–µ–∂—É—Ä–Ω–æ–≥–æ –Ω–µ—Ç.</i>', callsMenu);
      else {
        if (ctx.session.attendants.length === 1) {
          ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –¥–µ–∂—É—Ä—Å—Ç–≤–æ–º –Ω–∞ –∏—Å—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–∞—Ö.\n<i>–°–µ–π—á–∞—Å –¥–µ–∂—É—Ä–∏—Ç</i> @${ctx.session.attendants[0]}`, callsMenu);
        } else {
          var attendants = '';
          ctx.session.attendants.forEach (operator => {
            attendants += ' @' + operator;
          })
          ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –¥–µ–∂—É—Ä—Å—Ç–≤–æ–º –Ω–∞ –∏—Å—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–∞—Ö.\n<i>–°–µ–π—á–∞—Å –¥–µ–∂—É—Ä—è—Ç</i>${attendants}`, callsMenu);
        }
      }
    }
    catch (error) {
      console.log(`Got an error during showing attendant menu in chat for outgoing calls:\n${error}`);
      ctx.replyWithHTML('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ :( –ü–æ–ø—Ä–æ–±—É–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –µ—â—ë —Ä–∞–∑, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è - —Å–∫–∞–∂–∏ –°–µ–≤–µ', Telegraf.Extra.inReplyTo(ctx.message.message_id));
    }
  },



  writeAttendantOutgoingCalls: function (ctx) {

    try {
      var operatorID = -1;
      ctx.calls.attendants.forEach ((operator, id) => {
        if (ctx.update.callback_query.from.username === operator.telegramUsername)
          operatorID = id
      })
      if (operatorID < 0) {
        ctx.calls.attendants.push({
          telegramUsername: ctx.from.username
        });
        ctx.reply(`@${ctx.from.username} –∑–∞—Å—Ç—É–ø–∏–ª –Ω–∞ –¥–µ–∂—É—Ä—Å—Ç–≤–æ.`);
        ctx.answerCbQuery('–¢—ã –∑–∞—Å—Ç—É–ø–∏–ª –Ω–∞ –¥–µ–∂—É—Ä—Å—Ç–≤–æ!');
      } else {
        ctx.replyWithHTML('–¢—ã —É–∂–µ –∏ —Ç–∞–∫ –¥–µ–∂—É—Ä–∏—à—å');
      }
      utility.hideMenu(ctx);
    }
    catch (error) {
      console.log(`Got an error during adding attendant in chat for outgoing calls:\n${error}`);
      ctx.replyWithHTML('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ :( –ü–æ–ø—Ä–æ–±—É–π –∑–∞—Å—Ç—É–ø–∏—Ç—å –Ω–∞ –¥–µ–∂—É—Ä—Å—Ç–≤–æ –µ—â—ë —Ä–∞–∑, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è - —Å–∫–∞–∂–∏ –°–µ–≤–µ');
    }
  },



  writeAttendant: function (ctx) {

    try {
      ctx.session.attendants.push(ctx.from.username);
      ctx.reply(`@${ctx.from.username} –∑–∞—Å—Ç—É–ø–∏–ª –Ω–∞ –¥–µ–∂—É—Ä—Å—Ç–≤–æ.`);
      ctx.answerCbQuery('–¢—ã –∑–∞—Å—Ç—É–ø–∏–ª –Ω–∞ –¥–µ–∂—É—Ä—Å—Ç–≤–æ!');
      utility.hideMenu(ctx);
    }
    catch (error) {
      console.log(`Got an error during adding attendant in chat for vialotions etc. calls:\n${error}`);
      ctx.replyWithHTML('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ :( –ü–æ–ø—Ä–æ–±—É–π –∑–∞—Å—Ç—É–ø–∏—Ç—å –Ω–∞ –¥–µ–∂—É—Ä—Å—Ç–≤–æ –µ—â—ë —Ä–∞–∑, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è - —Å–∫–∞–∂–∏ –°–µ–≤–µ');
    }
  },



  removeAttendantOutgoingCalls: function (ctx) {

    try {
      var operatorID = -1;
      ctx.calls.attendants.forEach((operator, id) => {
        if (ctx.from.username === operator.telegramUsername) {
          operatorID = id;
        }
      })
      if (operatorID < 0) {
        utility.hideMenu(ctx);
        ctx.reply('–¢–µ–±—è –Ω–µ –±—ã–ª–æ –Ω–∞ –¥–µ–∂—É—Ä—Å—Ç–≤–µ ü§î');
      }
      else {
        if (ctx.calls.seniorsOnShift.length > 0) {
          var mentions = ``;
          ctx.calls.seniorsOnShift.forEach(senior => {
            mentions += `@${senior}, `
          })
          ctx.replyWithHTML(`@${ctx.from.username} —Å–¥–∞–ª –¥–µ–∂—É—Ä—Å—Ç–≤–æ.\n\n${mentions}–Ω–∞–∑–Ω–∞—á—å—Ç–µ –Ω–æ–≤–æ–≥–æ –¥–µ–∂—É—Ä–Ω–æ–≥–æ!`);
        } else {
          ctx.replyWithHTML(`@${ctx.from.username} —Å–¥–∞–ª –¥–µ–∂—É—Ä—Å—Ç–≤–æ.\n\n–ü–æ—Ö–æ–∂–µ, —á—Ç–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å—Ç–∞—Ä—à–µ–≥–æ –Ω–µ—Ç –Ω–∞ —Å–º–µ–Ω–µ. –ï—Å–ª–∏ —Ç—ã –∑–Ω–∞–µ—à—å, –∫—Ç–æ —Å–µ–π—á–∞—Å –Ω–∞ —Å–º–µ–Ω–µ - –ø—Ä–∏–∑–æ–≤–∏ –µ–≥–æ —Å—é–¥–∞`);
        }
        if (ctx.calls.attendants[operatorID].task) ctx.calls.active.push(ctx.calls.attendants[operatorID].task);
        ctx.calls.attendants.splice(operatorID, 1);
        utility.hideMenu(ctx);
        ctx.answerCbQuery('–î–µ–∂—É—Ä—Å—Ç–≤–æ —Å–¥–∞–Ω–æ!');
      }
    }
    catch (error) {
      console.log(`Got an error during removing attendant in chat for outgoing calls:\n${error}`);
      ctx.replyWithHTML('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ :( –ü–æ–ø—Ä–æ–±—É–π —Å–¥–∞—Ç—å –¥–µ–∂—É—Ä—Å—Ç–≤–æ –µ—â—ë —Ä–∞–∑, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è - —Å–∫–∞–∂–∏ –°–µ–≤–µ');
    }
  },

  removeAttendantOutgoingCallsForcefully: function (ctx) {
    try {
      let telegramUsername = utility.getCommandParameter(ctx);
      if (typeof telegramUsername !== 'undefined') {
        if (telegramUsername.indexOf('@') > -1) telegramUsername = telegramUsername.split('@')[1];
        var operatorID = -1;
        ctx.calls.attendants.forEach((operator, id) => {
          if (telegramUsername === operator.telegramUsername) {
            operatorID = id;
          }
        })
        if (operatorID < 0) {
          ctx.reply(`@${telegramUsername} –Ω–µ –±—ã–ª–æ –Ω–∞ –¥–µ–∂—É—Ä—Å—Ç–≤–µ ü§î`);
        }
        else {
          ctx.replyWithHTML(`@${telegramUsername} –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω —Å –¥–µ–∂—É—Ä—Å—Ç–≤–∞`);
          if (ctx.calls.attendants[operatorID].task) ctx.calls.active.push(ctx.calls.attendants[operatorID].task);
          ctx.calls.attendants.splice(operatorID, 1);
        }
      } else {
        ctx.calls.attendants = [];
        ctx.replyWithHTML(`–°–ø–∏—Å–æ–∫ –¥–µ–∂—É—Ä–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ–±–Ω—É–ª—ë–Ω`);
      }
    }
    catch (error) {
      console.log(`Got an error during removing attendant in chat for outgoing calls:\n${error}`);
      ctx.replyWithHTML('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ :( –ü–æ–ø—Ä–æ–±—É–π —Å–¥–∞—Ç—å –¥–µ–∂—É—Ä—Å—Ç–≤–æ –µ—â—ë —Ä–∞–∑, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è - —Å–∫–∞–∂–∏ –°–µ–≤–µ');
    }
  },

  removeAttendantForcefully: function (ctx) {
    try {
      let telegramUsername = utility.getCommandParameter(ctx);
      if (typeof telegramUsername !== 'undefined') {
        if (telegramUsername.indexOf('@') > 0) telegramUsername = telegramUsername.split('@')[1];
        var index = -1;
        ctx.session.attendants.forEach((operator, id) => {
          if (telegramUsername === operator.telegramUsername) {
            index = id;
          }
        })
        if (index < 0) {
          ctx.reply(`@${telegramUsername} –Ω–µ –±—ã–ª–æ –Ω–∞ –¥–µ–∂—É—Ä—Å—Ç–≤–µ ü§î`);
        }
        else {
          ctx.replyWithHTML(`@${telegramUsername} –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω —Å –¥–µ–∂—É—Ä—Å—Ç–≤–∞`);
          ctx.session.attendants.splice(index, 1);
        }
      } else {
        ctx.session.attendants = [];
        ctx.replyWithHTML(`–°–ø–∏—Å–æ–∫ –¥–µ–∂—É—Ä–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ–±–Ω—É–ª—ë–Ω`);
      }
    }
    catch (error) {
      console.log(`Got an error during removing attendant in chat for outgoing calls:\n${error}`);
      ctx.replyWithHTML('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ :( –ü–æ–ø—Ä–æ–±—É–π —Å–¥–∞—Ç—å –¥–µ–∂—É—Ä—Å—Ç–≤–æ –µ—â—ë —Ä–∞–∑, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è - —Å–∫–∞–∂–∏ –°–µ–≤–µ');
    }
  },

  removeAttendant: function (ctx) {

    try {
      var index = -1;
      ctx.session.attendants.forEach((operator, id) => {
        if (operator === ctx.from.username)
          index = id;
      })
      if (index < 0) {
        utility.hideMenu(ctx);
        ctx.reply('–¢–µ–±—è –Ω–µ –±—ã–ª–æ –Ω–∞ –¥–µ–∂—É—Ä—Å—Ç–≤–µ ü§î');
      }
      else {
        if (ctx.calls.seniorsOnShift.length > 0) {
          var mentions = ``;
          ctx.calls.seniorsOnShift.forEach(senior => {
            mentions += `@${senior}, `
          })
          ctx.replyWithHTML(`@${ctx.from.username} —Å–¥–∞–ª –¥–µ–∂—É—Ä—Å—Ç–≤–æ. <b>–ù–µ –∑–∞–±—É–¥—å –∑–∞–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è –Ω–∞ –ª–∏–Ω–∏—é –≤—Ö–æ–¥—è—â–∏—Ö!</b>\n\n${mentions}–Ω–∞–∑–Ω–∞—á—å—Ç–µ –Ω–æ–≤–æ–≥–æ –¥–µ–∂—É—Ä–Ω–æ–≥–æ!`);
        } else {
          ctx.replyWithHTML(`@${ctx.from.username} —Å–¥–∞–ª –¥–µ–∂—É—Ä—Å—Ç–≤–æ. <b>–ù–µ –∑–∞–±—É–¥—å –∑–∞–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è –Ω–∞ –ª–∏–Ω–∏—é –≤—Ö–æ–¥—è—â–∏—Ö!</b>\n\n–ü–æ—Ö–æ–∂–µ, —á—Ç–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å—Ç–∞—Ä—à–µ–≥–æ –Ω–µ—Ç –Ω–∞ —Å–º–µ–Ω–µ. –ï—Å–ª–∏ —Ç—ã –∑–Ω–∞–µ—à—å, –∫—Ç–æ —Å–µ–π—á–∞—Å –Ω–∞ —Å–º–µ–Ω–µ - –ø—Ä–∏–∑–æ–≤–∏ –µ–≥–æ —Å—é–¥–∞`);
        }
        utility.hideMenu(ctx);
        ctx.answerCbQuery('–î–µ–∂—É—Ä—Å—Ç–≤–æ —Å–¥–∞–Ω–æ!');
        ctx.session.attendants.splice(index, 1);
      }
    }
    catch (error) {
      console.log(`Got an error during removing attendant in chat for outgoing calls:\n${error}`);
      ctx.replyWithHTML('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ :( –ü–æ–ø—Ä–æ–±—É–π —Å–¥–∞—Ç—å –¥–µ–∂—É—Ä—Å—Ç–≤–æ –µ—â—ë —Ä–∞–∑, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è - —Å–∫–∞–∂–∏ –°–µ–≤–µ');
    }
  },



  assignTask: function (ctx) {
    var operatorID = -1;
    var tasksInWork = [];

    ctx.calls.attendants.forEach((operator, id) => {
      if (ctx.message.from.username === operator.telegramUsername) operatorID = id
      if (typeof operator.task !== 'undefined') tasksInWork.push(operator.task)
    })

    if (operatorID > -1) {
      if (!ctx.calls.attendants[operatorID].task) {

        if (ctx.calls.active.length > 0) {
          var taskWasFound = false;
          var message = '';
          var taskID = -1;
          var maxPriority = 0;

          for (let i = 0; i < settings.calls.queues.length; i++) {
            settings.calls.queues.forEach(queue => {
              if (maxPriority < queue.priority) maxPriority = queue.priority;
            })
          }

          for (priority = maxPriority; priority > 0; priority--) {
            for (let i = 0; i < ctx.calls.active.length; i++) {
              if (!task) {
                if (ctx.calls.active[i].priority === priority) {
                  if (ctx.calls.active[i].lockedDue) {
                    if (ctx.message.date > ctx.calls.active[i].lockedDue) {
                      var task = ctx.calls.active[i];
                      taskID = i;
                      break;
                    }
                  } else {
                    var task = ctx.calls.active[i];
                    taskID = i;
                    break;
                  }
                }
              }
            }
          }

          if (task) {
            ctx.calls.attendants[operatorID].task = task;
            ctx.calls.active.splice(taskID, 1);
          } else {
            ctx.replyWithHTML('<b>–¢–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á –Ω–∞ –ø—Ä–æ–∑–≤–æ–Ω –Ω–µ—Ç</b> ü•≥');
          }
        } else {
          ctx.replyWithHTML('<b>–¢–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á –Ω–∞ –ø—Ä–æ–∑–≤–æ–Ω –Ω–µ—Ç</b> ü•≥');
        }
      }

      const menuCurrentTaskCc = Telegraf.Extra
        .HTML()
        .markup((m) => m.inlineKeyboard([
          m.callbackButton('‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å', 'actionCompleteTaskCc'),
          m.callbackButton('‚è∞ –û—Ç–ª–æ–∂–∏—Ç—å', 'actionDelayTaskCc'),
          m.callbackButton('‚ùå –û—Ç–º–µ–Ω–∞', 'cancelTaskCc')
        ], {
          columns: 2
      }))


      if (ctx.calls.attendants[operatorID].task) {
        if (ctx.calls.attendants[operatorID].task.text[0] === '\n') ctx.calls.attendants[operatorID].task.text = ctx.calls.attendants[operatorID].task.text.substring(1);
        try {
          message = `–ó–∞–¥–∞–Ω–∏–µ –Ω–∞ –∑–≤–æ–Ω–æ–∫ <b>‚Ññ${ctx.calls.attendants[operatorID].task.globalID}</b>\n\n<b>–¢–µ–∫—Å—Ç:</b>${ctx.calls.attendants[operatorID].task.text}\n\n<b>–ö—Ç–æ –æ—Ç–¥–∞–ª –Ω–∞ –ø—Ä–æ–∑–≤–æ–Ω:</b> @${ctx.calls.attendants[operatorID].task.telegramUsername}\n<b>–ö—Ç–æ –∑–≤–æ–Ω–∏—Ç:</b> @${ctx.message.from.username}`;
          ctx.replyWithHTML(message, menuCurrentTaskCc);
        } catch (err) {
          try {
            message = `–ó–∞–¥–∞–Ω–∏–µ –Ω–∞ –∑–≤–æ–Ω–æ–∫ <b>‚Ññ${ctx.calls.attendants[operatorID].task.globalID}</b>\n\n<b>–¢–µ–∫—Å—Ç:</b><code>${ctx.calls.attendants[operatorID].task.text}</code>\n<b>–ö—Ç–æ –æ—Ç–¥–∞–ª –Ω–∞ –ø—Ä–æ–∑–≤–æ–Ω:</b> @${ctx.calls.attendants[operatorID].task.telegramUsername}\n<b>–ö—Ç–æ –∑–≤–æ–Ω–∏—Ç:</b> @${ctx.message.from.username}`;
            ctx.replyWithHTML(message, menuCurrentTaskCc);
          } catch (err) {
            message = `–ù–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –∑–≤–æ–Ω–æ–∫ <b>‚Ññ${ctx.calls.attendants[operatorID].task.globalID}</b>, –æ—à–∏–±–∫–∞ —Ç–µ–∫—Å—Ç–∞. –£—Ç–æ—á–Ω–∏ —Ç–µ–∫—Å—Ç —É —Ç–æ–≥–æ, –∫—Ç–æ –¥–µ–ª–∞–ª –∑–∞–¥–∞—á—É –Ω–∞ –ø—Ä–æ–∑–≤–æ–Ω.\n<b>–ö—Ç–æ –æ—Ç–¥–∞–ª –Ω–∞ –ø—Ä–æ–∑–≤–æ–Ω:</b> @${ctx.calls.attendants[operatorID].task.telegramUsername}\n<b>–ö—Ç–æ –∑–≤–æ–Ω–∏—Ç:</b> @${ctx.message.from.username}`
            ctx.replyWithHTML(message, menuCurrentTaskCc);
          }
        }
      }
    } else {
      ctx.replyWithHTML('–ë—Ä–∞—Ç—å –≤ —Ä–∞–±–æ—Ç—É –∑–≤–æ–Ω–∫–∏ –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –¥–µ–π—Å—Ç–≤—É—é—â–∏–π –¥–µ–∂—É—Ä–Ω—ã–π');
    }
  },



  chooseAmountForDelay: function (ctx) {

    var operatorID = -1;
    ctx.calls.attendants.forEach ((operator, id) => {
      if (ctx.update.callback_query.from.username === operator.telegramUsername)
        operatorID = id;
    })

    if (operatorID > -1) {
      //var taskNumber = ctx.callbackQuery.data.split('_')[1];
      if (ctx.calls.attendants[operatorID].task) {
        const menuDelayTaskCc = Telegraf.Extra
          .HTML()
          .markup((m) => m.inlineKeyboard([[
            m.callbackButton('5', 'actionDelay5TaskCc'),
            m.callbackButton('10', 'actionDelay10TaskCc'),
            m.callbackButton('15', 'actionDelay15TaskCc'),
            m.callbackButton('20', 'actionDelay20TaskCc'),
            m.callbackButton('30', 'actionDelay30TaskCc'),
            m.callbackButton('60', 'actionDelay60TaskCc')
          ], [
            //m.callbackButton('‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é', 'actionDelayCustomTaskCc_' + taskNumber),
            m.callbackButton('‚ùå –û—Ç–º–µ–Ω–∞', 'cancelprocedure')
          ]
          ], {
            columns: 6
          }))
        ctx.replyWithHTML('–í—ã–±–µ—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω –∑–≤–æ–Ω–æ–∫', menuDelayTaskCc);
        utility.hideMenu(ctx);
      }
    }
  },



  delayTask: function (ctx) {

    var operatorID = -1;
    ctx.calls.attendants.forEach ((operator, id) => {
      if (ctx.update.callback_query.from.username === operator.telegramUsername)
        operatorID = id
    })
    if (operatorID > -1) {
      if (ctx.calls.attendants[operatorID].task) {
        var delay = parseInt(ctx.callbackQuery.data.split('actionDelay')[1].split('TaskCc')[0]);
        var delayInSeconds = delay * 60;
        ctx.calls.attendants[operatorID].task.lockedDue = ctx.callbackQuery.message.date + delayInSeconds;
        ctx.calls.active.push(ctx.calls.attendants[operatorID].task);
        ctx.replyWithHTML(`–ó–∞–¥–∞—á–∞ <b>‚Ññ${ctx.calls.attendants[operatorID].task.globalID}</b> –æ—Ç–ª–æ–∂–µ–Ω–∞ –Ω–∞ <b>${delay}</b> –º–∏–Ω—É—Ç\n\n<i>–ß—Ç–æ–±—ã –≤–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /next</i>`);
        ctx.calls.attendants[operatorID].task = undefined;
        ctx.calls.attendants[operatorID].completing = false;
        ctx.deleteMessage();
      }
    }
  },



  waitForResolution: function (ctx) {
    var operatorID = -1;
    ctx.calls.attendants.forEach((operator, id) => {
      if (ctx.update.callback_query.from.username === operator.telegramUsername)
        operatorID = id
    })
    if (operatorID > -1) {
      if (ctx.calls.attendants[operatorID].task) {
        ctx.calls.attendants[operatorID].completing = true;
        ctx.replyWithHTML('–ü—Ä–∏—à–ª–∏ —Ä–µ–∑–æ–ª—é—Ü–∏—é –∑–∞–¥–∞—á–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n\n<i>–†–µ–∑–æ–ª—é—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Ç–æ–≥–∞—Ö —Ä–µ—à–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏.</i>');
        utility.hideMenu(ctx);
      } else {
        ctx.answerCbQuery('–≠—Ç–∞ –∑–∞–¥–∞—á–∞ –≤ —Ä–∞–±–æ—Ç–µ —É –¥—Ä—É–≥–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞');
      }
    }
  },



  writeResolutionForTask: function (ctx) {
    var operatorID = -1;
    ctx.calls.attendants.forEach ((operator, id) => {
      if (ctx.message.from.username === operator.telegramUsername) operatorID = id
    })
    if (operatorID > -1) {
      if (ctx.calls.attendants[operatorID].completing) {
        ctx.replyWithHTML(`<b>–ó–∞–¥–∞—á–∞ ‚Ññ${ctx.calls.attendants[operatorID].task.globalID} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!</b>\n\n<b>–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:</b> ${ctx.calls.attendants[operatorID].task.text}\n\n<b>–†–µ–∑–æ–ª—é—Ü–∏—è:</b> ${ctx.message.text}\n\n<b>–ö—Ç–æ –æ—Ç–¥–∞–≤–∞–ª –Ω–∞ –ø—Ä–æ–∑–≤–æ–Ω:</b> @${ctx.calls.attendants[operatorID].task.telegramUsername}\n<b>–ö—Ç–æ –ø–æ–∑–≤–æ–Ω–∏–ª:</b> @${ctx.message.from.username}\n\n<i>–ß—Ç–æ–±—ã –≤–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /next</i>`)
        ctx.calls.attendants[operatorID].task = undefined;
        ctx.calls.attendants[operatorID].completing = false;
      }
    }
  },



  writeTask: function (ctx) {
    // if (!ctx.calls.archive) ctx.calls.archive = {};
    // got rid of archive cause it is useless and just takes a lot of performance

    if (!ctx.calls.active) ctx.calls.active = [];
    if (!ctx.calls.counter) ctx.calls.counter = 0;

    ctx.calls.counter++;

    var text;
    var message;
    var newNumber = 1;
    var queue;

    settings.calls.queues.forEach(q => {
      if (ctx.message.text.indexOf(q.prefix) > -1) queue = q;
    })

    if (ctx.message.text.split(queue.prefix)[1].length > ctx.message.text.split(queue.prefix)[0].length) text = ctx.message.text.split(queue.prefix)[1];
    else text = ctx.message.text.split(queue.prefix)[0];

    ctx.calls.active.forEach(task => {
      if (!(task.priority < queue.priority)) newNumber++;
    })

    ctx.calls.active.push({
      "telegramUsername": ctx.message.from.username,
      "timestamp": ctx.message.date,
      "text": text,
      "priority": queue.priority,
      "globalID": ctx.calls.counter
    })


    switch (queue.priority) {
      case 0:
        message = `–ó–∞–¥–∞—á–∞ –Ω–∞ –∑–≤–æ–Ω–æ–∫ —É—Ç—Ä–æ–º –ø—Ä–∏–Ω—è—Ç–∞!\n\n<b>–ì–ª–æ–±–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏: </b>${ctx.calls.counter}`;
        break;
      case 1:
        message = `–ó–∞–¥–∞—á–∞ –Ω–∞ –∑–≤–æ–Ω–æ–∫ –ø—Ä–∏–Ω—è—Ç–∞! –ö–æ–≥–¥–∞ –∑–≤–æ–Ω–æ–∫ –±—É–¥–µ—Ç –≤ —Ä–∞–±–æ—Ç–µ, –±–æ—Ç –ø—Ä–∏–∑–æ–≤—ë—Ç —Ç–µ–±—è –≤ —á–∞—Ç.\n\n<b>–¢–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏:</b> ${newNumber}\n<b>–ì–ª–æ–±–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏:</b> ${ctx.calls.counter}`;
        break;
      case 2:
        message = `–ó–∞–¥–∞—á–∞ –Ω–∞ <b>—Å—Ä–æ—á–Ω—ã–π</b> –∑–≤–æ–Ω–æ–∫ –ø—Ä–∏–Ω—è—Ç–∞! –ö–æ–≥–¥–∞ –∑–≤–æ–Ω–æ–∫ –±—É–¥–µ—Ç –≤ —Ä–∞–±–æ—Ç–µ, –±–æ—Ç –ø—Ä–∏–∑–æ–≤—ë—Ç —Ç–µ–±—è –≤ —á–∞—Ç.\n\n<b>–¢–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏:</b> ${newNumber}\n<b>–ì–ª–æ–±–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏:</b> ${ctx.calls.counter}`;
        break;
      case 3:
       message = `–ó–∞–¥–∞—á–∞ –Ω–∞ <b>—Å—É–ø–µ—Ä-–ø—É–ø–µ—Ä-–º–µ–≥–∞ —Å—Ä–æ—á–Ω—ã–π</b> –∑–≤–æ–Ω–æ–∫ –ø—Ä–∏–Ω—è—Ç–∞! –ö–æ–≥–¥–∞ –∑–≤–æ–Ω–æ–∫ –±—É–¥–µ—Ç –≤ —Ä–∞–±–æ—Ç–µ, –±–æ—Ç –ø—Ä–∏–∑–æ–≤—ë—Ç —Ç–µ–±—è –≤ —á–∞—Ç.\n\n<b>–¢–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏:</b> ${newNumber}\n<b>–ì–ª–æ–±–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏:</b> ${ctx.calls.counter}`;
       break;
    }

    ctx.replyWithHTML(message, Telegraf.Extra.inReplyTo(ctx.message.message_id));
  },



  sendListOfActiveCalls: async function (ctx) {
    var message = `<b>–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –µ—Å—Ç—å:</b>`;
    var queues = [];
    var counterGlobal = 0;


    // I want to have all high priority tasks at the very beginning so
    // I use the very same function several times
    // Probably should parse amount of queues and generate the message based
    // on that stuff
    ctx.calls.active.forEach(task => {
      if (!queues[task.priority]) queues[task.priority] = {
        counter: 0,
        messages: []
      };
      let localMessage = ``;
      counterGlobal++;

      queues[task.priority].counter++;

      if (task.priority === 0) localMessage += `‚òÄÔ∏è `
      if (task.priority === 2) localMessage += `üî• `
      if (task.priority === 3) localMessage += `üö® `
      localMessage += `${task.text} (—Å–æ–∑–¥–∞–Ω–æ ${date.getByTimestamp(task.timestamp).string.DDMMhhmm}) (${task.globalID})`
      if (task.lockedDue) localMessage += ` (–æ—Ç–ª–æ–∂–µ–Ω–æ –¥–æ ${date.getByTimestamp(task.lockedDue).string.DDMMhhmm})`
      queues[task.priority].messages.push(localMessage);
    })

    if (counterGlobal > 0) {
      queues.slice().reverse().forEach((queue, priority) => {
        if (queue.counter > 0) {
          message += `\n‚Äî <b>${queue.counter}</b> `
          switch (priority) {
            case 0:
              message += `–∑–∞–¥–∞—á –Ω–∞ —É—Ç—Ä–æ ‚òÄÔ∏è`
              break;
            case 1:
              message += `–∑–∞–¥–∞—á`
              break;
            case 2:
              message += `—Å—Ä–æ—á–Ω—ã—Ö –∑–∞–¥–∞—á üî•`
              break;
            case 3:
              message += `—Å—É–ø–µ—Ä-–ø—É–ø–µ—Ä-–º–µ–≥–∞-—Å—Ä–æ—á–Ω—ã—Ö –∑–∞–¥–∞—á üö®`
              break;
          }
        }
      })

      message += '\n';

      var counterGlobal = 0;
      queues.slice().reverse().forEach((queue, priority) => {
        if (queue.counter > 0) {
          queue.messages.forEach(task => {
            counterGlobal++;
            message += `\n${counterGlobal}. ${task}`;
          })
        }
      })
      message += '\n\n–ß—Ç–æ–±—ã –≤–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É —Å–ª–µ–¥—É—é—â–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏ –∑–≤–æ–Ω–æ–∫, –¥–µ–∂—É—Ä–Ω—ã–π –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /next'

      utility.splitMessageAndReply(ctx, message);
    } else {
      ctx.replyWithHTML('<b>–¢–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á –Ω–µ—Ç</b> ü•≥');
    }
  },



  replyWithListOfAttendants: function (ctx) {

    if (ctx.message.chat.id === settings.ViolationsChatID || ctx.message.chat.id === settings.SpecialNotificationsChatID) {
      if (ctx.session.attendants.length === 0)
        ctx.reply('–°–µ–π—á–∞—Å –Ω–∏–∫—Ç–æ –Ω–µ –¥–µ–∂—É—Ä–∏—Ç –Ω–∞ –∏—Å—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–∞—Ö! –ò—Å–ø–æ–ª—å–∑—É–π /calls, —á—Ç–æ–±—ã –≤–∑—è—Ç—å –¥–µ–∂—É—Ä—Å—Ç–≤–æ');
      else {
        if (ctx.session.attendants.length === 1) {
          ctx.reply(`–°–µ–π—á–∞—Å –¥–µ–∂—É—Ä–∏—Ç @${ctx.session.attendants[0]}`);
        } else {
          var attendants = '';
          ctx.session.attendants.forEach (operator => {
            attendants += ' @' + operator;
          })
          ctx.reply(`–°–µ–π—á–∞—Å –¥–µ–∂—É—Ä—è—Ç ${attendants}`);
        }
      }
    }
    if (ctx.message.chat.id === settings.chats.outCalls.id || ctx.message.chat.id === settings.chats.test.id) {
      if (ctx.calls.attendants.length === 0)
        ctx.reply('–°–µ–π—á–∞—Å –Ω–∏–∫—Ç–æ –Ω–µ –¥–µ–∂—É—Ä–∏—Ç –Ω–∞ –∏—Å—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–∞—Ö! –ò—Å–ø–æ–ª—å–∑—É–π /calls, —á—Ç–æ–±—ã –≤–∑—è—Ç—å –¥–µ–∂—É—Ä—Å—Ç–≤–æ');
      else {
        if (ctx.calls.attendants.length === 1) {
          ctx.reply(`–°–µ–π—á–∞—Å –¥–µ–∂—É—Ä–∏—Ç @${ctx.calls.attendants[0].telegramUsername}`);
        } else {
          var attendants = '';
          ctx.calls.attendants.forEach (operator => {
            attendants += ' @' + operator.telegramUsername;
          })
          ctx.reply(`–°–µ–π—á–∞—Å –¥–µ–∂—É—Ä—è—Ç ${attendants}`);
        }
      }
    }
  },



  greetAndWriteSenior: function (ctx) {
    if (typeof ctx.calls.seniorsOnShift === 'undefined') ctx.calls.seniorsOnShift = [];
    var operatorID = -1;
    ctx.calls.seniorsOnShift.forEach((senior, id) => {
      if (ctx.message.from.username === senior) operatorID = id;
    })

    if (operatorID < 0) {
      ctx.calls.seniorsOnShift.push(ctx.message.from.username)
      ctx.replyWithHTML('–ü—Ä–∏–≤–µ—Ç, @' + ctx.message.from.username + '!');
    } else {
      ctx.reply('–¢—ã —É–∂–µ –∏ —Ç–∞–∫ –¥–µ–∂—É—Ä–∏—à—å ü§î');
    }
  },


  removeSenior: function (ctx) {
    var operatorID = -1;
    ctx.calls.seniorsOnShift.forEach((senior, id) => {
      if (ctx.message.from.username === senior) operatorID = id;
    })
    if (operatorID > -1) {
      ctx.calls.seniorsOnShift.splice(operatorID, 1)
      ctx.reply('–ü–æ–∫–∞, @' + ctx.message.from.username + '! –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–º–µ–Ω—É!');
    } else {
      ctx.reply('–¢–µ–±—è –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –¥–µ–∂—É—Ä–Ω—ã—Ö ü§î');
    }
  },


  mentionSeniorsOnShift: function (ctx) {
    var message = ``;
    if (ctx.calls.seniorsOnShift.length > 0) {
      ctx.calls.seniorsOnShift.forEach(senior => {
        message += `@${senior}, `
      })
      ctx.replyWithHTML(`${message}–ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞`, Telegraf.Extra.inReplyTo(ctx.message.message_id))
    } else {
      ctx.replyWithHTML(`–ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å—Ç–∞—Ä—à–µ–≥–æ –Ω–∞ —Å–º–µ–Ω–µ ü§î`)
    }
  },



  sendListOfActiveCallsFromUser: function (ctx) {

    /*if (ctx.message.chat.type === "private") {
      var tasks = [];
      ctx.calls.active.forEach((task, taskID) => {
          if (task.telegramUsername == ctx.message.from.username) {
          var temp = task;
          temp.taskID = taskID;
          tasks.push(temp);
        }
      })
      if (tasks.length > 0) {
        var word = '–∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏'
        if (tasks.length === 1) {
          word = '–∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞'
        }
        var message = `–£ —Ç–µ–±—è –µ—Å—Ç—å <b>${tasks.length}</b> ${word}\n`;
        tasks.forEach((task, taskID) => {
          message += `\n${taskID + 1}. ${task.text} (—Å–æ–∑–¥–∞–Ω–æ ${date.getByTimestamp(task.timestamp).string.DDMMhhmm}, –≥–ª–æ–±–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä ${task.taskID})`
        })
        const menuChooseTask = tasks.map((task, localNumber) => Telegraf.Markup.callbackButton(`${parseInt(localNumber) + 1} (${task.taskID})`, `actionEditOrDeleteTask_${task.taskID}`));
        ctx.replyWithHTML(message, Telegraf.Extra.HTML().markup((m) => m.inlineKeyboard(menuChooseTask, {
          columns: 4
        })));
      } else {
        ctx.reply('–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á');
      }
    }*/
  },


  mentionCurrentAttendants: function (ctx) {
    var message = `–°–µ–π—á–∞—Å –¥–µ–∂—É—Ä—è—Ç `
    ctx.calls.attendants.forEach(attendant => {
      message += `@${attendant.telegramUsername} `
    })
    ctx.replyWithHTML(message);
  },



  sendTasksCreatedByUser: function (ctx) {
    try {
      var tasksCreatedByUser = [];
      ctx.calls.active.forEach(task => {
        if (task.telegramUsername === ctx.message.from.username)
          tasksCreatedByUser.push(task)
      })
      if (tasksCreatedByUser.length > 0) {
        var word = '–∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏'
        if (tasksCreatedByUser.length === 1) {
          word = '–∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞'
        }
        var message = `–£ —Ç–µ–±—è –µ—Å—Ç—å <b>${tasksCreatedByUser.length}</b> ${word}\n`;
        tasksCreatedByUser.forEach((task, localNumber) => {
          message += `\n${localNumber + 1}. ${task.text} (—Å–æ–∑–¥–∞–Ω–æ ${date.getByTimestamp(task.timestamp).string.DDMMhhmm}, –≥–ª–æ–±–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä ${task.globalID})`
        })
        const menuChooseTask = tasksCreatedByUser.map((task, localNumber) => Telegraf.Markup.callbackButton(`${parseInt(localNumber) + 1} (${task.globalID})`, `actionEditOrDeleteTask_${task.globalID}`));
        ctx.replyWithHTML(message, Telegraf.Extra.HTML().markup((m) => m.inlineKeyboard(menuChooseTask, {
          columns: 4
        })));
      } else {
        ctx.reply('–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á');
      }
    } catch (err) {
      ctx.replyWithHTML('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–æ–æ–±—â–∏ –æ–± —ç—Ç–æ–º @example_login')
      console.log(err);
    }
  },



  showAllTasks: function (ctx) {
    try {
      var tasks = [];
      ctx.calls.active.common.forEach((taskID) => {
        tasks.push(taskID)
      })
      ctx.calls.active.priority.forEach((taskID) => {
        tasks.push(taskID)
      })
      ctx.calls.active.locked.forEach((taskID) => {
        tasks.push(taskID)
      })
      if (tasks.length > 0) {
        var word = '–∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏'
        if (tasks.length === 1) {
          word = '–∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞'
        }
        var message = `–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –µ—Å—Ç—å <b>${tasks.length}</b> ${word}\n`;
        tasks.forEach((taskID, taskNumber) => {
          message += `\n${taskNumber + 1}. ${ctx.calls.archive[taskID].text} (—Å–æ–∑–¥–∞–Ω–æ ${date.getByTimestamp(ctx.calls.archive[taskID].timestamp).string.DDMMhhmm}, –≥–ª–æ–±–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä ${taskID})`
        })
        const menuChooseTask = tasks.map((taskID, localNumber) => Telegraf.Markup.callbackButton(`${parseInt(localNumber) + 1} (${taskID})`, `actionEditOrDeleteTask_${taskID}`));
        console.log(message);
        console.log(`${message[313]}${message[314]}${message[315]}`);
        utility.splitMessageAndReply(ctx, message, Telegraf.Extra.HTML().markup((m) => m.inlineKeyboard(menuChooseTask, { columns: 4 })));
        /*ctx.replyWithHTML(message, Telegraf.Extra.HTML().markup((m) => m.inlineKeyboard(menuChooseTask, {
          columns: 4
        })));*/
      } else {
        ctx.reply('–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á');
      }
    } catch (err) {
      ctx.replyWithHTML('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–æ–æ–±—â–∏ –æ–± —ç—Ç–æ–º @example_login')
      console.log(err);
    }
  },



  offerToEditOrCancelTask: function (ctx) {
    try {
      var taskID = parseInt(ctx.callbackQuery.data.split('_')[1]);
      var task;

      ctx.calls.active.forEach(taskTemp => {
        if (taskTemp.globalID == taskID) task = taskTemp;
      })

      if (task) {
        const taskMenuDuty = Telegraf.Extra
          .HTML()
          .markup((m) => m.inlineKeyboard([
            m.callbackButton('‚ùå –£–¥–∞–ª–∏—Ç—å', `actionCancelTaskC—Å_${taskID}`),
            m.callbackButton('‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å', `actionEditTask–°—Å_${taskID}`),
            m.callbackButton('–û—Ç–º–µ–Ω–∞', 'cancelAction')
          ], {
            columns: 2
          }))
        var message = `–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∑–∞–¥–∞—á–µ–π <b>${taskID}</b>\n\n<b>–ö—Ç–æ —Å–æ–∑–¥–∞–ª:</b> @${task.telegramUsername}\n<b>–¢–µ–∫—Å—Ç:</b> ${task.text}\n`
        ctx.replyWithHTML(message, taskMenuDuty);
      } else {
        ctx.replyWithHTML(`–ó–∞–¥–∞—á–∞ <b>${taskID}</b> –ª–∏–±–æ –≤ —Ä–∞–±–æ—Ç–µ —É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, –ª–∏–±–æ —É–∂–µ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ.`);
      }
      utility.hideMenu(ctx);
    } catch (err) {
      ctx.replyWithHTML('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–æ–æ–±—â–∏ –æ–± —ç—Ç–æ–º @example_login')
      console.log(err);
    }
  },


  cancelTask: function (ctx) {
    try {
      var taskID = parseInt(ctx.callbackQuery.data.split('_')[1]);
      var task;
      var index;

      ctx.calls.active.forEach((taskTemp, i) => {
        if (taskTemp.globalID === taskID) {
          task = taskTemp;
          index = i;
        }
      })

      if (task) {
        if (index) {
          ctx.calls.active.splice(index, 1)
          ctx.replyWithHTML(`–ó–∞–≤–µ—Ä—à–∏–ª –∑–∞–¥–∞—á—É ‚Ññ<b>${taskID}</b>`)
        }
        else ctx.replyWithHTML(`–°—Ç—Ä–∞–Ω–Ω–æ, –Ω–∞—à—ë–ª –∑–∞–¥–∞—á—É <b>${taskID}</b>, –Ω–æ –Ω–µ —Å–º–æ–≥ –∑–∞–ø–∏—Å–∞—Ç—å –µ—ë –∏–Ω–¥–µ–∫—Å. –°–æ–æ–±—â–∏ –æ–± —ç—Ç–æ–º @example_login`)
      } else {
        ctx.replyWithHTML(`–ó–∞–¥–∞—á–∞ <b>${taskID}</b> –ª–∏–±–æ –≤ —Ä–∞–±–æ—Ç–µ —É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, –ª–∏–±–æ —É–∂–µ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ.`);
      }
      ctx.deleteMessage();
    } catch (err) {
      ctx.replyWithHTML('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–æ–æ–±—â–∏ –æ–± —ç—Ç–æ–º @example_login')
      console.log(err);
    }
  },


  waitForTaskEdit: function (ctx) {
    try {
      var taskID = parseInt(ctx.callbackQuery.data.split('_')[1]);

      var task;
      ctx.calls.active.forEach((taskTemp, i) => {
        if (taskTemp.globalID === taskID) task = taskTemp;
      })

      if (task) {
        ctx.session.taskID = taskID;
        ctx.replyWithHTML(`–ü—Ä–∏—à–ª–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ <b>${taskID}</b>\n<b>–°—Ç–∞—Ä—ã–π —Ç–µ–∫—Å—Ç:</b> ${task.text}\n\n<i>–ü–æ–º–Ω–∏, —á—Ç–æ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–º, –Ω–æ –ª–∞–∫–æ–Ω–∏—á–Ω—ã–º</i>`)
      } else {
        ctx.replyWithHTML(`–ó–∞–¥–∞—á–∞ <b>${taskID}</b> –ª–∏–±–æ –≤ —Ä–∞–±–æ—Ç–µ —É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, –ª–∏–±–æ —É–∂–µ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ.`);
      }

      ctx.deleteMessage();
    } catch (err) {
      ctx.replyWithHTML('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–æ–æ–±—â–∏ –æ–± —ç—Ç–æ–º @example_login')
      console.log(err);
    }
  },



  editTask: function (ctx) {
    try {
      if (ctx.session.taskID) {
        var taskID = ctx.session.taskID;

        var task;
        var index;
        ctx.calls.active.forEach((taskTemp, i) => {
          if (taskTemp.globalID === taskID) {
            task = taskTemp;
            index = i;
          }
        })

        if (task) {
          ctx.calls.active[index].text = ctx.message.text;
          ctx.replyWithHTML(`–ó–∞–¥–∞—á–∞ <b>${taskID}</b> —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!\n\n<b>–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç:</b>${ctx.message.text}`);
          ctx.session.taskID = undefined;
        } else {
          ctx.replyWithHTML(`–ó–∞–¥–∞—á–∞ <b>${taskID}</b> –ª–∏–±–æ –≤ —Ä–∞–±–æ—Ç–µ —É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, –ª–∏–±–æ —É–∂–µ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ.`);
        }
      }
    } catch (err) {
      ctx.replyWithHTML('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–æ–æ–±—â–∏ –æ–± —ç—Ç–æ–º @example_login')
      console.log(err);
    }
  }
}
